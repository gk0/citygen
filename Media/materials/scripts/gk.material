material gk/Terrain
{
   technique
   {
		pass
		{
			// lighting on
			// Base Pass
			ambient 1 1 1
			diffuse 1 1 1
			texture_unit
			{
				// Base Texture
				texture terrain_texture.jpg
			}
			texture_unit
			{
				texture terrain_detail.jpg
				colour_op_ex modulate_x2 src_current src_texture
				scale 0.03 0.03
			}         
		}  
	}
} 

material gk/Building2
{
   technique
   {
		pass
		{
			// lighting on
			// Base Pass
			ambient 1 1 1
			diffuse 1 1 1
			texture_unit
			{
				// Base Texture
				texture buildingtex.jpg
			}
		}  
	}
} 

material gk/Building3
{
   technique
   {
		pass
		{
			// lighting on
			// Base Pass
			ambient 1 1 1
			diffuse 1 1 1
			texture_unit
			{
				// Base Texture
				texture buildingtex2.jpg
			}
		}  
	}
} 

material gk/Building4
{
   technique
   {
		pass
		{
			// lighting on
			// Base Pass
			ambient 1 1 1
			diffuse 1 1 1
			texture_unit
			{
				// Base Texture
				texture buildingtex3.jpg
			}
		}  
	}
} 

material gk/Hilite/Yellow
{
	technique
	{
		pass
		{

			texture_unit
			{
				texture dkyellow.png
			}
		}
	}
}

material Material
{
	technique
	{
		pass
		{

			texture_unit
			{
				texture dkyellow.png
			}
		}
	}
}

material gk/Hilite/Red2
{
	technique
	{
		pass
		{
			ambient 0.2 0.1 0.1
			diffuse 0.5 0.0 0.0
			specular 0.7 0.7 0.7 50
		}
	}
}

material default
{
	technique
	{
		pass
		{

			texture_unit
			{
				texture gk_red.png
			}
		}
	}
}


material gk/Hilite/Red
{
	technique
	{
		pass
		{

			texture_unit
			{
				texture gk_red.png
			}
		}
	}
}

material gk/Terrain2
{
   technique
   {
		pass
		{
			// lighting on
			// Base Pass
			ambient 1 1 1
			diffuse 1 1 1
			texture_unit
			{
				// Base Texture
				texture terrain_texture.jpg
			}
			texture_unit
			{
				texture terrain_detail.jpg
				colour_op_ex modulate_x2 src_current src_texture
				scale 0.03 0.03
			}         
		}  
		 
		pass
		{
			scene_blend alpha_blend

			texture_unit
			{
				texture gk_testalpha.png
				tex_coord_set 0
				colour_op modulate
			}
		}
	}
} 

material Examples/TextureEffect4
{
	technique
	{
		pass
		{
			ambient 0.3 0.3 0.3
			scene_blend colour_blend
			cull_hardware none
			cull_software none

			texture_unit
			{
				texture Water02.jpg
				scroll_anim 0.01 0.01
			}
		}
	}
}

material gk/MyWater
{
	technique
	{
		pass
		{
			ambient 0.3 0.3 0.3
			scene_blend colour_blend
			cull_hardware none
			cull_software none

			texture_unit
			{
				texture Water02.jpg
				scroll_anim 0.01 0.01
			}
			texture_unit NormalMap
			{
				texture water_normal.jpg
			}
		}
	}
}

material gk/Building
{
	technique
	{
		pass
		{
			ambient 0.2 0.2 0.2
			diffuse 0.4 0.4 0.4
			specular 0.6 0.6 0.6 32
		}
	}
}

material gk/Road
{
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1 
			specular 0.2 0.2 0.2 10
			
			texture_unit
			{
				// Base Texture
				texture road.png
				//filtering anisotropic 
			}
			//texture_unit
			//{
			//	texture road_detail.png
			//	colour_op alpha_blend //white no alpha
			//	colour_op_ex blend_texture_alpha src_current src_texture //nothing
			//	colour_op_ex modulate_x2 src_current src_texture //works but lightens everything
			//	colour_op_ex modulate src_current src_texture //works but is a bit dark
			//	colour_op_ex add src_current src_texture
			//	scale 0.2 0.2
			//	filtering anisotropic 
			//}   
		}
	}
}


material gk/RoadJunction
{
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1 
			specular 0.2 0.2 0.2 10
			
			texture_unit
			{
				// Base Texture
				texture junction.png
			} 
		}
	}
}

material gk/YellowBrickRoad
{
	technique
	{
		pass
		{
			ambient 1 1 1
			diffuse 1 1 1 
			specular 0.2 0.2 0.2 10
			
			texture_unit
			{
				// Base Texture
				texture yellowroad.png
				//filtering anisotropic 
			}
		}
	}
}


vertex_program Examples/BumpMapVP cg
{
	source Example_BumpMapping.cg
	entry_point main_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFP cg
{
	source Example_BumpMapping.cg
	entry_point main_fp
	profiles ps_1_1 arbfp1 fp20
}

vertex_program Examples/BumpMapVPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_vp
	profiles vs_1_1 arbvp1
}

// Bump map fragment program, support for this is optional
fragment_program Examples/BumpMapFPSpecular cg
{
	source Example_BumpMapping.cg
	entry_point specular_fp
	profiles ps_1_1 arbfp1 fp20
}

// Any number of lights, diffuse and specular
material Examples/BumpMapping/MultiLightSpecular
{

	// This is the preferred technique which uses both vertex and
	// fragment programs, supports coloured lights
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}
			
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			// do this for each light
			iteration once_per_light

		
			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVPSpecular
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto eyePosition camera_position_object_space
				param_named_auto worldViewProj worldviewproj_matrix
			}

			// Fragment program
			fragment_program_ref Examples/BumpMapFPSpecular
			{
				param_named_auto lightDiffuse light_diffuse_colour 0 
				param_named_auto lightSpecular light_specular_colour 0
			}
			
			// Base bump map
			texture_unit
			{
				texture NMBumpsOut.png
				colour_op replace
			}
			// Normalisation cube map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
			}
			// Normalisation cube map #2
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 2
				tex_address_mode clamp
			}
		}
		
		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture RustedMetal.jpg 
			}
			
		}
	}

	// This is the fallback which cards which don't have fragment program 
	// support will use, NB does not support specular colour
	// Note that it still requires vertex program support
	technique
	{
		// Base ambient pass
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 1 1 1
			diffuse 0 0 0 
			specular 0 0 0 0
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named_auto ambient ambient_light_colour
			}
			
		}
		// Now do the lighting pass
		// NB we don't do decal texture here because this is repeated per light
		pass
		{
			// base colours, not needed for rendering, but as information
			// to lighting pass categorisation routine
			ambient 0 0 0 
			// do this for each light
			iteration once_per_light

		
			scene_blend add

			// Vertex program reference
			vertex_program_ref Examples/BumpMapVP
			{
				param_named_auto lightPosition light_position_object_space 0
				param_named_auto worldViewProj worldviewproj_matrix
			}
			
			// Base bump map
			texture_unit
			{
				texture NMBumpsOut.png
				colour_op replace
			}
			// Normalisation cube map, with dot product on bump map
			texture_unit
			{
				cubic_texture nm.png combinedUVW
				tex_coord_set 1
				tex_address_mode clamp
				colour_op_ex dotproduct src_texture src_current
				colour_op_multipass_fallback dest_colour zero
			}
		}
		
		// Decal pass
		pass
		{
			lighting off
			// Really basic vertex program
			// NB we don't use fixed function here because GL does not like
			// mixing fixed function and vertex programs, depth fighting can
			// be an issue
			vertex_program_ref Ogre/BasicVertexPrograms/AmbientOneTexture
			{
				param_named_auto worldViewProj worldviewproj_matrix
				param_named ambient float4 1 1 1 1
			}
			scene_blend dest_colour zero
			texture_unit
			{
				texture RustedMetal.jpg 
			}
			
		}

	}
}
